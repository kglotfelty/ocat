#! /usr/bin/env python

# 
# Copyright (C) 2013  Smithsonian Astrophysical Observatory
# 
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# 

import sys
import os

import ciao_contrib.logger_wrapper as lw

toolname = "qocat"
version = "03 Feb 2016"

lw.initialize_logger(toolname, verbose=1)
v1 = lw.make_verbose_level(toolname, 1)



def fmt_keyvalue_pair( key, keyvals, name, post="", eqls = ":" ):
    if key not in keyvals or keyvals[key] is None:
        return ""
    
    return "  {0:>22s} {1} {2} {3}\n".format( name, eqls, keyvals[key], post )


def get_summary( retvals, info_level ):
    """
    Construct a string summarizing the configuration
    """
    retstr = ""

    if info_level.mission: 
        retstr += fmt_keyvalue_pair( "telescop", retvals, "Telescope" )
    if info_level.instrument:
        retstr += fmt_keyvalue_pair( "instrume", retvals, "Instrument")
    if info_level.detector:
        retstr += fmt_keyvalue_pair( "detnam", retvals, "Detector Name" )
    if info_level.grating:
        retstr += fmt_keyvalue_pair( "grating", retvals, "Grating" )
    if info_level.obs_id:
        retstr += fmt_keyvalue_pair( "obs_id", retvals, "Observation ID")
    if info_level.obi_num:
        retstr += fmt_keyvalue_pair( "obi_num", retvals, "Observation Number")
    if info_level.cycle:
        retstr += fmt_keyvalue_pair( "cycle", retvals, "Interleaved Exposure")
    if info_level.object:
        retstr += fmt_keyvalue_pair( "object", retvals, "Object Name")
    if "pi_name" in retvals:
        retstr += fmt_keyvalue_pair( "pi_name", retvals, "Principal Investigator")
    if info_level.observer:
        retstr += fmt_keyvalue_pair( "observer", retvals, "Observer Name")
    if info_level.title:
        retstr += fmt_keyvalue_pair( "title", retvals, "Proposal Title")
    if "pr_num" in retvals:
        retstr += fmt_keyvalue_pair( "pr_num", retvals, "Proposal Number")
    if info_level.seqn:
        retstr += fmt_keyvalue_pair( "seq_num", retvals, "Observation Sequence")
    if "type" in retvals:
        retstr += fmt_keyvalue_pair( "type", retvals, "Observation Type")
    if "obs_cycle" in retvals:
        retstr += fmt_keyvalue_pair( "obs_cycle", retvals, "Observation Cycle")
    if "category" in retvals:
        retstr += fmt_keyvalue_pair( "category", retvals, "Observation Category")
    if info_level.dateobs:
        retstr += fmt_keyvalue_pair( "date-obs", retvals, "Observation Date")
    if info_level.livetime:
        retstr += fmt_keyvalue_pair( "livetime", retvals, "Exposure Time", post="[ksec]")
    if info_level.dtf:
        retstr += fmt_keyvalue_pair( "dtcor", retvals, "Dead Time Factor" )
    if info_level.datamode:
        retstr += fmt_keyvalue_pair( "datamode", retvals, "Data Mode")
    if info_level.readmode:
        retstr += fmt_keyvalue_pair( "readmode", retvals, "Readout Mode")
    if info_level.nrows:
        retstr += fmt_keyvalue_pair( "nrows", retvals, "Full Frame/Subarray")
    if info_level.ascdsver:
        retstr += fmt_keyvalue_pair( "ascdsver", retvals, "Software Version")
    if info_level.caldbver:
        retstr += fmt_keyvalue_pair( "caldbver", retvals, "CALDB Version")
    if info_level.revision:
        retstr += fmt_keyvalue_pair( "revision", retvals, "Processing Revision")
    if info_level.creator:
        retstr += fmt_keyvalue_pair( "creator", retvals, "Created by tool" )
    if info_level.nom:
        retstr += fmt_keyvalue_pair( "nom", retvals, "Nominal Pointing", post="[deg]")
    if info_level.point:
        retstr += fmt_keyvalue_pair( "pnt", retvals, "Mean Optical Axis", post="[deg]")
    if info_level.targ:
        retstr += fmt_keyvalue_pair( "targ", retvals, "Target Location", post="[deg]")
    if info_level.sim:
        retstr += fmt_keyvalue_pair( "sim", retvals, "SIM Location", post="[mm]")
    if info_level.soff:
        retstr += fmt_keyvalue_pair( "soff", retvals, "Mean SIM offsets", post="[mm, mm, deg]")
    if "public_avail" in retvals:
        retstr += fmt_keyvalue_pair( "public_avail", retvals, "Publically Available")

    if "proposal_text" in retvals:
        retstr += fmt_keyvalue_pair( "proposal_text", retvals, "Proposal Abstract")

    return retstr



def get_keys_from_file( infile, getlist ):
    """
    
    """
    from cxcdm import dmKeyRead, dmBlockOpen, dmGetName, dmBlockGetKeyList, dmBlockClose


    def get_keyword_if_exists( block, keylist, key ):
        """
        Get keyword value if it exists, returns None if not found.
        """
        if key not in keylist:
            return None
        d,v = dmKeyRead( block, key )
        return v


    _block = dmBlockOpen( infile )
    _keylist = [dmGetName(x).lower() for x in dmBlockGetKeyList( _block ) ]
    _getvals = [ get_keyword_if_exists( _block, _keylist, k) for k in getlist ]
    dmBlockClose( _block )

    retvals = dict(zip(getlist, _getvals ))

    return retvals

def get_keys_from_ocat( obsid, getlist ):
    """
    
    """
    server = "cda.harvard.edu"
    service = "srservices/ocatDetails.do"
    resource = "http://{0}/{1}".format(server, service)

    prop_service = "srservices/propAbstract.do"
    prop_resource = "http://{0}/{1}".format(server, prop_service)
        
    def make_URL_request( resource, vals ):
        """
        Query and retrieve results from resourse using dictionary of
        vals values.
        """
        import urllib as urllib
        import urllib2 as urllib2

        params = urllib.urlencode( vals )  # Encode into URL string, escape stuff/etc.
        request = urllib2.Request( resource, params )
        response = urllib2.urlopen( request )
        page = response.read()
        
        if len(page) == 0:
            raise Exception("Problem accessing resource {0}".format(resource))
        
        if response.getcode() != 200:
            raise Exception( page )
        return page


    def parse_page( page):
        page_lines = page.split("\n")

        page_lines_nohdr = filter( lambda x : not x.startswith("#"), page_lines )

        hdr = [x.lower() for x in page_lines_nohdr[0].split("\t")] 
        ln =page_lines_nohdr[2] # should only be 1 row, but leave door open
        tlin = ln.replace("\t\t","\tNone\t")
        flds = tlin.split("\t")
        tab = dict(zip( hdr, flds))
        return tab  

    def parse_prop_page(page):
        """
        Ugh, I hate parsing unstructured HTML :(
        """

        from textwrap import fill

        pp = page.strip().split("\n")

        begin = filter(lambda x: 'colspan="2"' in x, pp)
        assert len(begin) == 1

        begin_idx = pp.index(begin[0])
        prop = pp[begin_idx+2]
        prop = fill(prop.strip(), 80, subsequent_indent=" "*27,  initial_indent=" "*27).lstrip()

        return prop
       
        


    def translate_ocat_values( tab ):
        #from coords.format import ra2deg, dec2deg
        xtab = { "detnam" : "readout_detector",
                 "obs_id" : "obsid",
                 "instrume" : "instr",
                 "grating" : "grat",
                 "date-obs" : "start_date",
                 "title" : "prop_title",
                 "ra_targ" : "ra",
                 "dec_targ" : "dec",
                 "object" : "target_name",
                 "livetime" : "exp_time",
                 "readmode" : "mode",
                 "nrows" : "row_cnt",
                 "cycle" : "d_cyc",
                 }
        for x in xtab:
            if xtab[x] in tab:
                tab[x] = tab[xtab[x]]
        
        tab["ra_targ"] = float( tab["ra_targ"]) #float(ra2deg(":".join(tab["ra_targ"].strip().split(" "))))
        tab["dec_targ"] = float( tab["dec_targ"]) #float(dec2deg(":".join(tab["dec_targ"].strip().split(" "))))
        tab["telescop"] = "CHANDRA"
        if tab["instrume"].startswith("ACIS"):
            tab["instrume"] = "ACIS"
            if "NONE" == tab["subary"]:
                tab["nrows"] = "1024"

        if "None" == tab["livetime"]:
            tab["livetime"] = "0"
        else:
            tab["livetime"] = str(float(tab["livetime"])*1000)

    

    page = make_URL_request( resource, { "obsid" : obsid, "format" : "text", "outputCoordUnits" : "decimal" } )
    tab = parse_page( page )
    for g in getlist:
        if g not in tab:
            tab[g] = None


    translate_ocat_values (tab )

    prop_page = make_URL_request( prop_resource, { "obsid" : obsid } )
    prop = parse_prop_page(prop_page) 
    tab["proposal_text"] = prop
    
    return tab



def get_chandra_config( infile, info_level ):
    
    """
    """



    getlist = [ "telescop", "instrume", "detnam", "date-obs", "livetime", 
        "grating", "datamode", "readmode", "object", 
        "observer", "obs_id", "obi_num", "cycle", "nrows" , 
        "title", "dtcor", "dtycycle", 
        "ascdsver", "caldbver", "revision", "creator",
        "seq_num", 
        "ra_nom", "dec_nom", "roll_nom",
        "ra_pnt", "dec_pnt", "roll_pnt",
        "ra_targ", "dec_targ",
        "sim_x", "sim_y", "sim_z", "dy_avg", "dz_avg", "dth_avg" ]

    
    try:
        retvals = get_keys_from_file( infile, getlist )
        if "obs_id" in retvals and retvals["obs_id"].isdigit():
            retvals_ocat = get_keys_from_ocat( retvals["obs_id"], getlist )
            for kk in retvals_ocat:
                if kk not in retvals:
                    retvals[kk] = retvals_ocat[kk]
    except:        
        if infile.isdigit():
            oo = int(infile)
            if (oo>0) and (oo<65536):
                retvals = get_keys_from_ocat( infile, getlist )
            else:
                raise ValueError("Illegal obsid value")
        else:
            raise RuntimeError("Problem with infile")

    #
    # Fix values, make pretty
    #
    
    if retvals["detnam"] and retvals["detnam"].startswith("ACIS"):
        retvals["detector"] = retvals["detnam"].split("-")[0]
    else:
        retvals["detector"] = retvals["detnam"]
    
    if retvals["livetime"]:
        rlt = float( retvals["livetime"] ) /1000.0 # ksec
        rlt = int(rlt*10+0.5) / 10.0 # round to 1 decimal place
        retvals["livetime"] = rlt
    
    if retvals["nrows"]:
        if int(retvals["nrows"]) < 1022:
            retvals["nrows"] = "SUBARRAY"
        else:
            retvals["nrows"] = "FULLFRAME"

    if retvals["date-obs"]:
        retvals["date-obs"] = retvals["date-obs"].split("T")[0]

    if retvals["cycle"]:
        if retvals["cycle"] == 'P':
            retvals["cycle"] = "PRIMARY"
        elif retvals["cycle"] == 'S':
            retvals["cycle"] = "SECONDARY"
        elif retvals["cycle"] == 'B':
            retvals["cycle"] = "BOTH"
        else:
            #Unknown, pass same value along
            pass

    if retvals["sim_z"]:
        # sim_z positive is HRC aimpoints
        # sim_z < -205 is ACIS-I aimpoint
        # sim_z > -205 is ACIS-S aimpoint
        z = float( retvals["sim_z"] )
        if z > 0:
            aim = retvals["detector"] if retvals["detector"] else None
        elif z < -205:
            aim = "ACIS-I"
        else:
            aim = "ACIS-S"
        retvals["aimpoint"] = aim


    if retvals["dtcor"]:
        retvals["dtcor"] = "{:.3g}".format( retvals["dtcor"] )

    #if info_level.sexagesimal:
    #    from coords.format import deg2ra, deg2dec
    #    if retvals["ra_nom"] and retvals["dec_nom"]:
    #        retvals["ra_nom"] = deg2ra( retvals["ra_nom"], ":" )
    #        retvals["dec_nom"] = deg2dec( retvals["dec_nom"], ":" )
    #    if retvals["ra_pnt"] and retvals["dec_pnt"]:
    #        retvals["ra_pnt"] = deg2ra( retvals["ra_pnt"], ":" )
    #        retvals["dec_pnt"] = deg2dec( retvals["dec_pnt"], ":" )
    #    if retvals["ra_targ"] and retvals["dec_targ"]:
    #        retvals["ra_targ"] = deg2ra( retvals["ra_targ"], ":" )
    #        retvals["dec_targ"] = deg2dec( retvals["dec_targ"], ":" )

    def get_list_vals( lvals, names ):
        """
        """
        simvals = map(lambda x: retvals[x], lvals)

        if not all(map( lambda x: x is not None, simvals)):
            return None

        retstr = ""+", ".join([ "{}={:.8g}".format(n,v) for n,v in zip( names, simvals ) ] )+""

        return retstr

    retvals["sim"] = get_list_vals( [ "sim_x", "sim_y", "sim_z"], ["X", "Y", "Z"] )
    retvals["soff"] = get_list_vals( [ "dy_avg", "dz_avg", "dth_avg"], ["dY", "dZ", "dTheta"])
    retvals["nom"] = get_list_vals( [ "ra_nom", "dec_nom", "roll_nom"], ["RA", "Dec", "Roll"] )
    retvals["pnt"] = get_list_vals( [ "ra_pnt", "dec_pnt", "roll_pnt"],["RA", "Dec", "Roll"] )
    retvals["targ"] = get_list_vals( [ "ra_targ", "dec_targ" ],["RA", "Dec"] )

    return retvals


def parse_details( default=False):
    """
    Parse command line args to extract list of files to check.
    """
    from optparse import OptionParser
    pp = OptionParser()

    pp.add_option("-m", "--mission", dest="mission", default=False, action="store_true", help="Telescope" )
    pp.add_option("-i", "--instrument", dest="instrument", default=False, action="store_true", help="Instrument")
    pp.add_option("-d", "--detector", dest="detector", default=False, action="store_true", help="Detector" )
    pp.add_option("-g", "--grating", dest="grating", default=False, action="store_true", help="Grating" )
    pp.add_option("-o", "--obsid", dest="obs_id", default=False, action="store_true", help="OBS_ID" )
    pp.add_option("-O", "--obi", dest="obi_num", default=False, action="store_true", help="OBI Number" )
    pp.add_option("-c", "--cycle", dest="cycle", default=False, action="store_true", help="Alternating Exposure Mode (ACIS only)" )
    pp.add_option("-b", "--object", dest="object", default=False, action="store_true", help="Object" )
    pp.add_option("-p", "--proptitle", dest="title", default=False, action="store_true", help="Proposal Title" )
    pp.add_option("-n", "--observer", dest="observer", default=False, action="store_true", help="Observer" )
    pp.add_option("-D", "--dateobs", dest="dateobs", default=False, action="store_true", help="Observation start date" )
    pp.add_option("-t", "--exposuretime", dest="livetime", default=False, action="store_true", help="Observation exposure time" )
    pp.add_option("-f", "--dtf", dest="dtf", default=False, action="store_true", help="Average dead time" )
    pp.add_option("-a", "--datamode", dest="datamode", default=False, action="store_true", help="Datamode" )
    pp.add_option("-r", "--readmode", dest="readmode", default=False, action="store_true", help="Readmode (ACIS only)" )
    pp.add_option("-s", "--subarray", dest="nrows", default=False, action="store_true", help="Subarray (ACIS only)" )
    pp.add_option("-A", "--ascdsver", dest="ascdsver", default=False, action="store_true", help="Pipeline processing version" )
    pp.add_option("-C", "--caldbver", dest="caldbver", default=False, action="store_true", help="Pipeline calibration database version" )
    pp.add_option("-R", "--revision", dest="revision", default=False, action="store_true", help="Pipeline processing version" )
    pp.add_option("-E", "--creator", dest="creator", default=False, action="store_true", help="Creator and version of this file" )
    pp.add_option("-Q", "--sequence", dest="seqn", default=False, action="store_true", help="Observation sequence number" )
    pp.add_option("-P", "--propnum", dest="propnum", default=False, action="store_true", help="Proposal number" )
    pp.add_option("-N", "--nom", dest="nom", default=False, action="store_true", help="Nominal pointing (tangent point)" )
    pp.add_option("-X", "--point", dest="point", default=False, action="store_true", help="Mean optical axis pointing" )
    pp.add_option("-T", "--target", dest="targ", default=False, action="store_true", help="User supplied target location" )
    pp.add_option("-S", "--sim", dest="sim", default=False, action="store_true", help="SIM location" )
    pp.add_option("-F", "--simoffset", dest="soff", default=False, action="store_true", help="Mean sim offsets" )
    pp.add_option("-Z", "--all", dest="withall", default=False, action="store_true", help="All of the above")
    pp.add_option("-x", "--sexagesimal", dest="sexagesimal", default=False, action="store_true", help="Convert RA & Dec values to sexagesimal format")

    (ops,args) = pp.parse_args()

    if len(args) == len(sys.argv[1:]) and default:
        for k in dir(ops):
            if k.startswith("_"):
                continue
            setattr( ops, k, True )

    if ops.withall:
        for k in dir(ops):
            if k.startswith("_"):
                continue
            setattr( ops, k, True )

    return ops,args


def parse_cl_args( default=False):
    """
    Parse command line args to extract list of files to check.
    """
    o,a = parse_details(default=default)
    info_level = o
        
    # Check list to only pick up files (not directories)
    files_to_check = a
    
    if len( files_to_check ) == 0:
        raise ValueError("No usable files specified")

    return info_level,files_to_check


def print_obs_summary( infile, obsinfo ):
    """
    Print the observation summary tool
    """
    
    #v1( infile )
    v1( obsinfo )
    v1( "")
    


@lw.handle_ciao_errors(toolname, version)
def sumobs():
    """
    Main routine to summarize a chandra obsid
    """
    import stk as stk

    if len( sys.argv ) < 2:
        raise ValueError( "Usage: {} filenames|obs_ids".format(sys.argv[0] ))

    info_level,infiles = parse_cl_args(default=True)

    if len(infiles) != 1 :
        raise RuntimeError("Must supply only 1 file/obsid or a stack") 
        
    infiles = stk.build( infiles[0] )
    
    for infile in infiles:
        retvals = get_chandra_config( infile, info_level )    
        obs_info = get_summary( retvals, info_level )
        print_obs_summary( infile, obs_info )



if __name__ == "__main__":
    sumobs()
    sys.exit(0)


